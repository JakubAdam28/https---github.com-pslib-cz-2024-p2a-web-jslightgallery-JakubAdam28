"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const Styled = require("../styles/styled");
const functions_1 = require("../utils/functions");
const react_1 = require("react");
const useEffectOnce_1 = require("../utils/useEffectOnce");
const TimerBar = ({ interval, initStartTime, forcePause }) => {
    const [style, setStyle] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        if (forcePause)
            return;
        let frameId;
        let start = initStartTime;
        const step = time => {
            const timestamp = performance.timeOrigin + time;
            if (!start)
                start = timestamp;
            const diff = timestamp - start;
            const percentage = Math.min(diff / interval, 1);
            setStyle({ left: `${percentage * 100}%`, width: `${100 - percentage * 100}%` });
            if (diff <= interval) {
                frameId = requestAnimationFrame(step);
            }
        };
        frameId = requestAnimationFrame(step);
        return () => cancelAnimationFrame(frameId);
    }, [interval, initStartTime, forcePause]);
    return (0, jsx_runtime_1.jsx)(Styled.TimerBar, { style: style });
};
const ImageWrapper = ({ item }) => {
    return item.link ? ((0, jsx_runtime_1.jsx)(Styled.ImageWrapperA, Object.assign({ theme: { backgroundColor: item.backgroundColor }, href: item.link, target: item.newTab ? '_blank' : undefined, rel: "noopener noreferrer", draggable: false }, { children: (0, jsx_runtime_1.jsx)(Styled.Image, { theme: { objectFit: item.objectFit }, src: item.image, draggable: false }) }))) : ((0, jsx_runtime_1.jsx)(Styled.ImageWrapperDiv, Object.assign({ theme: { backgroundColor: item.backgroundColor } }, { children: (0, jsx_runtime_1.jsx)(Styled.Image, { theme: { objectFit: item.objectFit }, src: item.image, draggable: false }) })));
};
const JSSwiper = ({ items, prevButton, nextButton, stateButton, duration = 200, interval = 0, onChangeItem: handleChangeItem = () => { }, onChangeState: handleChangeState = () => { }, width, height, startEffect, }) => {
    var _a, _b, _c;
    if (!items.length)
        return null;
    if (items.length === 1)
        items = Array(2).fill(items[0]).map((item, i) => (Object.assign(Object.assign({}, item), { order: item.order + i })));
    const initialStyle = { transform: `translate3d(0%, 0, 0)` };
    const mainEl = (0, react_1.useRef)(null);
    const mainWidth = (0, react_1.useMemo)(() => { var _a; return ((_a = mainEl.current) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0; }, [(_a = mainEl.current) === null || _a === void 0 ? void 0 : _a.clientWidth]);
    const swipeSize = (0, react_1.useMemo)(() => { var _a, _b; return (_b = (((_a = mainEl.current) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0) / 4) !== null && _b !== void 0 ? _b : 100; }, [(_b = mainEl.current) === null || _b === void 0 ? void 0 : _b.clientWidth]);
    const [item, setItem] = (0, react_1.useState)({ visible: items[0] });
    const [style, setStyle] = (0, react_1.useState)(initialStyle);
    const [timerId, setTimerId] = (0, react_1.useState)();
    const [startTime, setStartTime] = (0, react_1.useState)(new Date().getTime());
    const [diff, setDiff] = (0, react_1.useState)();
    const [timerBarPause, setTimerBarPause] = (0, react_1.useState)(false);
    const [touch, setTouch] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => setButtonEvent(prevButton, handlePrev), [item.visible, prevButton]);
    (0, react_1.useEffect)(() => setButtonEvent(nextButton, handleNext), [item.visible, nextButton]);
    (0, react_1.useEffect)(() => {
        const state = stateButton === null || stateButton === void 0 ? void 0 : stateButton.current;
        if (!state)
            return;
        const handleClick = () => (timerId ? handlePause() : handlePlay());
        state.addEventListener('click', handleClick);
        return () => state.removeEventListener('click', handleClick);
    }, [timerId, stateButton, startTime, diff]);
    (0, react_1.useEffect)(() => {
        if (touch) {
            setItem(item => ({ visible: item.prev ? item.prev : item.next ? item.next : item.visible }));
            setTouch(undefined);
            return;
        }
        if (item.prev) {
            setStyle({ transform: `translate3d(0%, 0, 0)`, transition: `transform ${duration}ms ease` });
        }
        else if (item.next) {
            setStyle({ transform: `translate3d(-100%, 0, 0)`, transition: `transform ${duration}ms ease` });
        }
        else {
            setStyle(initialStyle);
        }
    }, [item]);
    (0, react_1.useEffect)(() => {
        if (item.prev) {
            handleChangeState('play');
            handleChangeItem(item.prev);
        }
        if (item.next) {
            handleChangeState('play');
            handleChangeItem(item.next);
        }
    }, [item.prev, item.next]);
    const setButtonEvent = (ref, handler) => {
        const el = ref === null || ref === void 0 ? void 0 : ref.current;
        if (!el)
            return;
        const handlerMiddleware = () => {
            setStartTime(new Date().getTime());
            handleAutoPlay();
            handler();
        };
        el.addEventListener('click', handlerMiddleware);
        return () => el.removeEventListener('click', handlerMiddleware);
    };
    let effect;
    if (!startEffect)
        effect = react_1.useEffect;
    else if (startEffect === 'useEffectOnce')
        effect = useEffectOnce_1.default;
    else
        effect = startEffect;
    effect(() => {
        handlePlay();
    }, []);
    (0, react_1.useEffect)(() => () => {
        clearTimeout(timerId);
        clearInterval(timerId);
    }, [timerId]);
    const getIndex = (item) => items.findIndex(v => v.order === item.order);
    const getNeighbor = (arg) => {
        const index = typeof arg !== 'number' ? getIndex(arg) : arg;
        const item = typeof arg !== 'number' ? arg : items[arg];
        const prevIndex = index === 0 ? items.length - 1 : index - 1;
        const prev = items[prevIndex];
        const nextIndex = index === items.length - 1 ? 0 : index + 1;
        const next = items[nextIndex];
        const visible = item;
        return { prev, visible, next };
    };
    const handlePrev = () => handleBoth('prev');
    const handleNext = () => handleBoth('next');
    const handleBoth = (type) => {
        setStartTime(new Date().getTime());
        setStyle(type === 'next' ? initialStyle : { transform: `translate3d(-100%, 0, 0)` });
        setItem(item => {
            var _a;
            return (Object.assign(Object.assign({}, getNeighbor((_a = item[type]) !== null && _a !== void 0 ? _a : item.visible)), { [type === 'prev' ? 'next' : 'prev']: undefined }));
        });
    };
    const handleAutoPlay = () => !!interval && interval > 0 && setTimerId(setInterval(handleNext, interval));
    const handleTimeoutInterval = (timeout_interval, interval) => {
        if (!interval || interval < 0)
            return;
        setTimerId(setTimeout(() => {
            handleNext();
            setTimerId(setInterval(handleNext, interval));
        }, timeout_interval));
    };
    const handlePlay = () => {
        if (!interval || interval < 0)
            return;
        const continueTime = interval - (diff !== null && diff !== void 0 ? diff : 0);
        setStartTime(new Date().getTime() + continueTime - interval);
        setTimerBarPause(false);
        handleChangeState('play');
        handleTimeoutInterval(continueTime, interval);
    };
    const handlePause = () => {
        const diff = new Date().getTime() - startTime;
        setDiff(diff);
        setTimerBarPause(true);
        handleChangeState('pause');
        clearInterval(timerId);
        setTimerId(undefined);
    };
    const handleTransitionEnd = () => {
        setItem(item => ({ visible: item.prev ? item.prev : item.next ? item.next : item.visible }));
    };
    /** For mobile device */
    (0, react_1.useEffect)(() => {
        if (!mainEl.current)
            return;
        const handleTouchMove = (e) => {
            e.preventDefault();
        };
        mainEl.current.addEventListener('touchmove', handleTouchMove);
        return () => { var _a; return (_a = mainEl.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('touchmove', handleTouchMove); };
    }, [mainEl]);
    const handleTouchStart = (e) => {
        if (touch)
            return;
        handlePause();
        const posX = e.touches.item(0).clientX;
        setTouch({ initX: posX });
    };
    const handleTouchMove = (0, react_1.useCallback)((e) => {
        if (!touch)
            return;
        const posX = e.touches.item(0).clientX;
        const state = posX - touch.initX < 0 ? 'forward' : posX === touch.initX ? 'same' : 'backward';
        let prev, next;
        let additionalTransform = '';
        if (state === 'forward') {
            next = getNeighbor(item.visible).next;
        }
        else if (state === 'backward') {
            prev = getNeighbor(item.visible).prev;
            additionalTransform = 'translate3d(-100%, 0, 0) ';
        }
        setTouch(touch => (touch ? Object.assign(Object.assign({}, touch), { lastX: posX, style: { transform: additionalTransform + `translate3d(${posX - touch.initX}px, 0, 0)` }, prev, next }) : undefined));
    }, [touch]);
    const handleTouchEnd = (0, react_1.useCallback)((e) => {
        if (touch === null || touch === void 0 ? void 0 : touch.lastX) {
            const timingFunc = functions_1.TIMINGFUNC_MAP['ease'];
            let start;
            const initX = touch.lastX - touch.initX;
            const isChange = Math.abs(initX) > swipeSize;
            const isNext = Math.sign(initX) < 0;
            const toX = isChange ? Math.sign(initX) * mainWidth : 0;
            const step = time => {
                if (!start)
                    start = time;
                const diff = time - start;
                const percentage = Math.min(diff / duration, 1);
                setTouch(touch => {
                    if (touch) {
                        const defaultTransform = `translate3d(${(toX - initX) * timingFunc(percentage) + initX}px, 0, 0) `;
                        const additionalTransform = `translate3d(-100%, 0, 0) `;
                        const transform = touch.prev ? additionalTransform + defaultTransform : defaultTransform;
                        return Object.assign(Object.assign({}, touch), { style: { transform } });
                    }
                    else {
                        return undefined;
                    }
                });
                if (diff <= duration) {
                    requestAnimationFrame(step);
                }
                else {
                    if (isChange) {
                        if (isNext)
                            handleNext();
                        else
                            handlePrev();
                        if (!!interval && interval > 0)
                            setTimerId(setInterval(handleNext, interval));
                    }
                    else {
                        handlePlay();
                    }
                }
            };
            requestAnimationFrame(step);
        }
        else {
            setTouch(undefined);
            handlePlay();
        }
    }, [touch]);
    return ((0, jsx_runtime_1.jsxs)(Styled.Container, Object.assign({ ref: mainEl, style: { width, height } }, { children: [!!interval && (0, jsx_runtime_1.jsx)(TimerBar, { interval: interval - duration - 200, initStartTime: startTime, forcePause: timerBarPause }), (0, jsx_runtime_1.jsxs)(Styled.ImagesWrapper, Object.assign({ style: (_c = touch === null || touch === void 0 ? void 0 : touch.style) !== null && _c !== void 0 ? _c : style, onTransitionEnd: handleTransitionEnd, 
                /** For mobile device */
                onContextMenu: e => e.preventDefault(), onTouchStart: handleTouchStart, onTouchMove: handleTouchMove, onTouchEnd: handleTouchEnd }, { children: [!item.prev && !!(touch === null || touch === void 0 ? void 0 : touch.prev) && (0, jsx_runtime_1.jsx)(ImageWrapper, { item: touch.prev }, touch.prev.order), !!item.prev && (0, jsx_runtime_1.jsx)(ImageWrapper, { item: item.prev }, item.prev.order), (0, jsx_runtime_1.jsx)(ImageWrapper, { item: item.visible }, item.visible.order), !!item.next && (0, jsx_runtime_1.jsx)(ImageWrapper, { item: item.next }, item.next.order), !item.next && !!(touch === null || touch === void 0 ? void 0 : touch.next) && (0, jsx_runtime_1.jsx)(ImageWrapper, { item: touch.next }, touch.next.order)] }))] })));
};
exports.default = JSSwiper;
